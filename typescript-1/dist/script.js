(()=>{"use strict";var e={216:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Node=t.Tree=void 0;class r extends HTMLElement{constructor(e){super(),this._tree={id:"root",items:[]},this._tree={id:"root",items:[]},this.attachShadow({mode:"open"}),e&&this.setAttribute("id",e)}static get observedAttributes(){return["tree"]}get Tree(){return this._tree}set Tree(e){this._tree=e,this.render()}attributeChangedCallback(e,t,r){this.Tree=JSON.parse(r)}render(){let e=this.shadowRoot,t=new s("");t.Tree=this._tree,e&&e.appendChild(t)}}t.Tree=r;class s extends r{get ID(){return this._tree?this._tree.id:null}get items(){return this._tree?this._tree.items:null}render(){let e=this.shadowRoot,t=document.createElement("ul");e&&e.appendChild(t);let r=document.createElement("li");r.innerHTML=""+this.ID,t.appendChild(r),this.items&&this.items.forEach((e=>{let t=new s("");t.Tree=e,r.appendChild(t)}))}}t.Node=s}},t={};function r(s){var i=t[s];if(void 0!==i)return i.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,r),n.exports}(()=>{const e=r(216);window.customElements.define("my-tree",e.Tree),window.customElements.define("my-node",e.Node)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwibWFwcGluZ3MiOiI0R0FHQSxNQUFhQSxVQUFhQyxZQWN2QkMsWUFBWUMsR0FDVEMsUUFkSCxLQUFBQyxNQUFlLENBQUVGLEdBQUksT0FBUUcsTUFBTyxJQWVqQ0MsS0FBS0YsTUFBUSxDQUFFRixHQUFJLE9BQVFHLE1BQU8sSUFFbENDLEtBQUtDLGFBQWEsQ0FBRUMsS0FBTSxTQUN0Qk4sR0FBSUksS0FBS0csYUFBYSxLQUFNUCxHQWhCeEJRLGdDQUNSLE1BQU8sQ0FBQyxRQUVQWCxXQUNELE9BQU9PLEtBQUtGLE1BRVhMLFNBQUtZLEdBQ05MLEtBQUtGLE1BQVFPLEVBQ2JMLEtBQUtNLFNBV1JDLHlCQUF5QkMsRUFBY0MsRUFBa0JDLEdBQ3REVixLQUFLUCxLQUFPa0IsS0FBS0MsTUFBTUYsR0FFMUJKLFNBQ0csSUFBSU8sRUFBU2IsS0FBS2MsV0FDZEMsRUFBVyxJQUFJQyxFQUFLLElBQ3hCRCxFQUFTdEIsS0FBT08sS0FBS0YsTUFDakJlLEdBQVFBLEVBQU9JLFlBQVlGLElBN0JyQyxTQWlDQSxNQUFhQyxVQUFhdkIsRUFDbkJ5QixTQUNELE9BQU9sQixLQUFLRixNQUFRRSxLQUFLRixNQUFNRixHQUFLLEtBRW5DRyxZQUNELE9BQU9DLEtBQUtGLE1BQVFFLEtBQUtGLE1BQU1DLE1BQVEsS0FFMUNPLFNBQ0csSUFBSU8sRUFBU2IsS0FBS2MsV0FDZEssRUFBS0MsU0FBU0MsY0FBYyxNQUM1QlIsR0FBUUEsRUFBT0ksWUFBWUUsR0FFL0IsSUFBSUcsRUFBS0YsU0FBU0MsY0FBYyxNQUNoQ0MsRUFBR0MsVUFBWSxHQUFLdkIsS0FBS2tCLEdBQ3pCQyxFQUFHRixZQUFZSyxHQUVYdEIsS0FBS0QsT0FDTkMsS0FBS0QsTUFBTXlCLFNBQVFDLElBQ2hCLElBQUlDLEVBQVUsSUFBSVYsRUFBSyxJQUN2QlUsRUFBUWpDLEtBQU9nQyxFQUNmSCxFQUFHTCxZQUFZUyxPQXBCM0IsV0NuQ0lDLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFFLFFBR3JCLElBQUlDLEVBQVNOLEVBQXlCRSxHQUFZLENBR2pERyxRQUFTLElBT1YsT0FIQUUsRUFBb0JMLEdBQVVJLEVBQVFBLEVBQU9ELFFBQVNKLEdBRy9DSyxFQUFPRCxRLE1DckJmLGVBR0FHLE9BQU9DLGVBQWVDLE9BQU8sVUFBVyxFQUFBNUMsTUFDeEMwQyxPQUFPQyxlQUFlQyxPQUFPLFVBQVcsRUFBQXJCLE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0LTEvLi9zcmMvY29tcG9uZW50cy9UcmVlLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtMS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LTEvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElUcmVlIGZyb20gJy4uL2ludGVyZmFjZXMvSVRyZWUnXHJcbmltcG9ydCBJVHJlZUl0ZW0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JVHJlZUl0ZW0nXHJcblxyXG5leHBvcnQgY2xhc3MgVHJlZSBleHRlbmRzIEhUTUxFbGVtZW50IGltcGxlbWVudHMgSVRyZWVJdGVtIHtcclxuICAgX3RyZWU6IElUcmVlID0geyBpZDogJ3Jvb3QnLCBpdGVtczogW10gfTtcclxuXHJcbiAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICByZXR1cm4gWyd0cmVlJ107XHJcbiAgIH1cclxuICAgZ2V0IFRyZWUoKTogSVRyZWUge1xyXG4gICAgICByZXR1cm4gdGhpcy5fdHJlZTtcclxuICAgfVxyXG4gICBzZXQgVHJlZSh2YWw6IElUcmVlKSB7XHJcbiAgICAgIHRoaXMuX3RyZWUgPSB2YWw7XHJcbiAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgIH1cclxuXHJcbiAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcpIHtcclxuICAgICAgc3VwZXIoKTtcclxuICAgICAgdGhpcy5fdHJlZSA9IHsgaWQ6ICdyb290JywgaXRlbXM6IFtdIH07XHJcblxyXG4gICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xyXG4gICAgICBpZiAoaWQpIHRoaXMuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xyXG4gICB9XHJcblxyXG4gICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZTogc3RyaW5nLCBvbGRWYWx1ZTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMuVHJlZSA9IEpTT04ucGFyc2UobmV3VmFsdWUpO1xyXG4gICB9XHJcbiAgIHJlbmRlcigpIHtcclxuICAgICAgbGV0IHNoYWRvdyA9IHRoaXMuc2hhZG93Um9vdDtcclxuICAgICAgbGV0IG5vZGVJdGVtID0gbmV3IE5vZGUoXCJcIik7XHJcbiAgICAgIG5vZGVJdGVtLlRyZWUgPSB0aGlzLl90cmVlO1xyXG4gICAgICBpZiAoc2hhZG93KSBzaGFkb3cuYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xyXG4gICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOb2RlIGV4dGVuZHMgVHJlZSB7XHJcbiAgIGdldCBJRCgpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3RyZWUgPyB0aGlzLl90cmVlLmlkIDogbnVsbDtcclxuICAgfVxyXG4gICBnZXQgaXRlbXMoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl90cmVlID8gdGhpcy5fdHJlZS5pdGVtcyA6IG51bGw7XHJcbiAgIH1cclxuICAgcmVuZGVyKCkge1xyXG4gICAgICBsZXQgc2hhZG93ID0gdGhpcy5zaGFkb3dSb290O1xyXG4gICAgICBsZXQgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG4gICAgICBpZiAoc2hhZG93KSBzaGFkb3cuYXBwZW5kQ2hpbGQodWwpO1xyXG5cclxuICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgbGkuaW5uZXJIVE1MID0gJycgKyB0aGlzLklEO1xyXG4gICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XHJcblxyXG4gICAgICBpZiAodGhpcy5pdGVtcykge1xyXG4gICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBuZXdOb2RlID0gbmV3IE5vZGUoXCJcIik7XHJcbiAgICAgICAgICAgIG5ld05vZGUuVHJlZSA9IGl0ZW07XHJcbiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgIH1cclxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJpbXBvcnQgeyBUcmVlLCBOb2RlIH0gZnJvbSAnLi9jb21wb25lbnRzL1RyZWUnXHJcblxyXG5cclxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIm15LXRyZWVcIiwgVHJlZSk7XHJcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJteS1ub2RlXCIsIE5vZGUpOyJdLCJuYW1lcyI6WyJUcmVlIiwiSFRNTEVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsImlkIiwic3VwZXIiLCJfdHJlZSIsIml0ZW1zIiwidGhpcyIsImF0dGFjaFNoYWRvdyIsIm1vZGUiLCJzZXRBdHRyaWJ1dGUiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJ2YWwiLCJyZW5kZXIiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIkpTT04iLCJwYXJzZSIsInNoYWRvdyIsInNoYWRvd1Jvb3QiLCJub2RlSXRlbSIsIk5vZGUiLCJhcHBlbmRDaGlsZCIsIklEIiwidWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJsaSIsImlubmVySFRNTCIsImZvckVhY2giLCJpdGVtIiwibmV3Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwid2luZG93IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiXSwic291cmNlUm9vdCI6IiJ9